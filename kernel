inline float gaussian(const float mu,
                      const float sigma,
                      const float scale,
                      const float value)
{
    const float d = value - mu;
    //return scale * exp(-0.5f * d * d / (sigma * sigma));
    return scale / (1.0f + sigma * d * d);
}


__kernel void pso(__constant const float *paramsf, 
                  __constant const uint *paramsi,
                  __global const float *data, 
                  __global const float *particle, 
                  __global float *out, 
                  __local float *ldat,
                  __local float *ltmp,
                  const uint partID)
{
    // params float
    const float targetValue = paramsf[0];
    const float targetSigma = paramsf[1];
    const float minSigma = paramsf[2];
    
    // params uint
    const uint targetAhead = paramsi[0];
    const uint Window = paramsi[1];
    const uint Nodes = paramsi[2];  
    const uint localWindowSize = paramsi[3];
    const uint dataNoWindowSize = paramsi[4];
    const uint Dim = paramsi[5];
    const uint Groups = paramsi[6];
    
    // ids
    const uint gid = get_global_id(0);
    const uint lid = get_local_id(0);
    const uint los = get_local_size(0);
    const uint grp = get_group_id(0);
    const uint off = grp * los;
        
    // copy global to local memory
    /*for (uint i = 0; i < localWindowSize; i += los)
    {
        <this is to make sure its commented>
        uint lidx = lid + i;            
        if (lidx >= localWindowSize)
        {
            lidx = lid;
        }       
        const uint gidx = off + lidx;
        ldat[lidx] = data[gidx];
    }*/
    for (uint i = lid; i < localWindowSize; i += los)
    {
        ldat[i] = data[off + i];
    }   
    //printf("%f %f\n", ldat[lid], data[gid]);
    barrier(CLK_LOCAL_MEM_FENCE);

    // normalize data window to 0-1
    float vmin = FLT_MAX,
          vmax = -FLT_MAX;
    for (uint k = 0; k < Window; ++k)
    {
        const uint idx = lid + k;
        if (ldat[idx] < vmin) vmin = ldat[idx];
        if (ldat[idx] > vmax) vmax = ldat[idx];
    }
    float scale;
    if (vmin == vmax)
    {
        scale = 1.0f;
        vmin -= 0.5f;
    }
    else
    {
        scale = 1.0f / (vmax - vmin);
    }

    // compute teacher
    const float teacher = gaussian(targetValue, targetSigma, 1.0f, scale * (ldat[lid + (Window - 1) + targetAhead] - vmin));
    //printf("%u %u\n", lid + (Window - 1) + targetAhead, localWindowSize);

    // kernel response
    float sum = 0.0f;
    uint counter = Dim * partID;
    for (uint i = 0; i < Window; ++i)
    {
        for (uint k = 0; k < Nodes; ++k)
        {
            sum += gaussian(particle[counter++],
                            fabs(particle[counter++]) + minSigma,
                            particle[counter++],
                            scale * (ldat[lid + i] - vmin));
        }
    }
    sum /= (float)(Window * Nodes);
        
    // compute error
    const float err = sum - teacher; 
    ltmp[lid] = (gid < dataNoWindowSize) ? (err * err) : (0.0f);
    barrier(CLK_LOCAL_MEM_FENCE);
    
    // reduce
    for (uint shift = (los >> 1); shift > 0; shift >>= 1)
    {
        if (lid < shift)
        {
            ltmp[lid] += ltmp[lid + shift];
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
        
    //printf("%u %f\n", lid, ltmp[0]);
    
    // write out
    if (lid == 0)
    {
        out[partID * Groups + grp] = ltmp[0];     
    }
}