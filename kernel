inline float gaussian(const float mu,
                       const float sigma,
                       const float scale,
                       const float value)
{
    const float d = value - mu;
    //return scale * exp(-0.5f * d * d / (sigma * sigma));
    return scale / (1.0f + sigma * d * d);
}


__kernel void pso(__constant const float *paramsf, 
				  __constant const uint *paramsi,
				  __global const float *data, 
				  __constant const float *particle, 
				  __global float *out, 
				  __local float *tmp)
{
	// params float
	const float targetValue = paramsf[0];
	const float targetSigma = paramsf[1];
	const float minSigma = paramsf[2];
	
	// params uint
	const uint targetAhead = paramsi[0];
	const uint Window = paramsi[1];
	const uint Nodes = paramsi[2];	
	
	// ids
	const uint gid = get_global_id(0);
	const uint lid = get_local_id(0);

	// normalize data window to 0-1
    float vmin = FLT_MAX,
          vmax = -FLT_MAX;
    for (uint k = 0; k < Window; ++k)
    {
        const uint idx = gid + k;
        if (data[idx] < vmin) vmin = data[idx];
        if (data[idx] > vmax) vmax = data[idx];
    }
    float scale;
    if (vmin == vmax)
    {
        scale = 1.0f;
        vmin -= 0.5f;
    }
    else
    {
        scale = 1.0f / (vmax - vmin);
    }

    // compute teacher
    const float teacher = gaussian(targetValue, targetSigma, 1.0f, scale * (data[gid + (Window - 1) + targetAhead] - vmin));

	// kernel response
	float sum = 0.0f;
	uint counter = 0;
    for (uint i = 0; i < Window; ++i)
    {
        for (uint k = 0; k < Nodes; ++k)
        {
            sum += gaussian(particle[counter++],
                            fabs(particle[counter++]) + minSigma,
                            particle[counter++],
                            scale * (data[gid + i] - vmin));
        }
    }
    sum /= (float)(Window * Nodes);
	
	// compute error
	const float err = sum - teacher;	
	out[gid] = err * err;
	
	//uint bla = gid + Window + targetAhead - 1u;
	//printf("min=%f, max=%f, gid=%u, teach=%u, resp=%f, teacher=%f, mu=%f, sig=%f, sca=%f\n", vmin, vmax, gid, bla, sum, teacher, particle[0], fabs(particle[1]) + minSigma, particle[2]); 
}